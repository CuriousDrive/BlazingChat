@page "/settings"
@using BlazingChat.Shared.ViewModels
@using BlazingChat.Shared.Models
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime

<h2><b>Settings</b></h2> 
<hr />

<EditForm Model="@_settingsViewModel">
    
    <div class="col-12">
        <input type="checkbox" checked="@_settingsViewModel.Notifications" id="chkNotification" @onchange="@(e => UpdateNotifications(e))">
        <label> Notification </label>
        <br>

        <input type="checkbox" checked="@_settingsViewModel.DarkTheme" id="chkDarkTheme" @onchange="@(e => UpdateTheme(e))">
        <label> Dark Theme </label>
        <br>
    </div>

</EditForm>

@code {
    private SettingsViewModel _settingsViewModel = new SettingsViewModel();
    long UserId;

    protected override async Task OnInitializedAsync()
    {
        UserId = await LocalStorageService.GetItemAsync<long>("userId");
        User user = await HttpClient.GetFromJsonAsync<User>("user/getprofile/" + UserId);

        _settingsViewModel = user;
    }

    private async Task UpdateTheme(ChangeEventArgs changeEventArgs)
    {
        User user = await HttpClient.GetFromJsonAsync<User>($"user/updatetheme?userId={UserId}&value={changeEventArgs.Value.ToString()}");
        
        await JSRuntime.InvokeVoidAsync("setTheme", "site" + user.DarkTheme);
    }

    private async Task UpdateNotifications(ChangeEventArgs changeEventArgs)
    {
        object obj = await HttpClient.GetFromJsonAsync<object>($"user/updatenotifications?userId={UserId}&value={changeEventArgs.Value.ToString()}");
        
    }

}