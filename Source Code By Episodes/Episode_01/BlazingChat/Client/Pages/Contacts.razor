@page "/contacts"
@using BlazingChat.Shared.ViewModels
@using BlazingChat.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2><b>Contacts</b></h2> 
<hr />

<div class="list-group table-wrapper-scroll-y my-custom-scrollbar">
    <SpinLoader IsLoading =@(_contactsViewModel.ChatViewModelList == null)>
        
        <LoadingTemplate>
            <div style="height: 900px; background-color: lightgray; vertical-align: middle;">
                <br/><br/>
                <Chase Center="true" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        
        <ContentTemplate>
            @if(_contactsViewModel.ChatViewModelList != null)
            {
                @foreach(ChatViewModel chatViewModel in _contactsViewModel.ChatViewModelList)
                {
                    <a @onclick="@(e => NavigateToChat(chatViewModel.UserId))" class="list-group-item list-group-item-action flex-column align-items-start">
                        <div class="d-flex w-100 justify-content-between">
                            @if(chatViewModel.FirstName != null || chatViewModel.LastName != null)
                            {
                                <h6 class="mb-1"><b>@chatViewModel.FirstName<span> </span>@chatViewModel.LastName</b></h6>
                            }
                            else
                            {
                                <h6 class="mb-1"><b>@chatViewModel.EmailAddress</b></h6>
                            }
                            
                            <small>@chatViewModel.TimeSinceLastMessage</small>
                        </div>
                        <p class="mb-1">@chatViewModel.LastMessage</p>
                    </a>
                }
            }
        </ContentTemplate>
    </SpinLoader>
</div>

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    private ContactsViewModel _contactsViewModel = new ContactsViewModel();
    ClaimsPrincipal loggedinUser;

    protected async override Task OnInitializedAsync()
    {
        loggedinUser = (await authenticationStateTask).User;

        await LoadContacts();
    }

    private void NavigateToChat(long userId)
    {
        string argUserId = Convert.ToString(userId);
        NavigationManager.NavigateTo("chat/" + argUserId);
    }

    private async Task LoadContacts()
    {
        await Task.Delay(200);
        //hopefully this will be something that I can do properly    
        List<User> UserList = await HttpClient.GetFromJsonAsync<List<User>>("user/getallusers");
        _contactsViewModel.ChatViewModelList = new List<ChatViewModel>();
        
        foreach(User user in UserList)
        {
            if(loggedinUser.Identity.Name != user.EmailAddress)
                _contactsViewModel.ChatViewModelList.Add(new ChatViewModel(user.UserId,user.FirstName, user.LastName, user.EmailAddress));
        }
    }
}