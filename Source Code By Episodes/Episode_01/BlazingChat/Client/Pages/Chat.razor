@page "/chat"
@page "/chat/{ToUserId}"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazingChat.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@using BlazingChat.Shared.ViewModels
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService

<div class="col-12">
    <p></p>
</div>

<div style="border:0px;height:90vh;">    
    <div class="panel panel-primary" style="height: 100%;">
        <div class="panel-heading top-bar">
        <div class="col-md-8 col-xs-8">
            <h3 class="panel-title">
                @if(ToUser.FirstName != null || ToUser.LastName != null)
                {                    
                    <b>@ToUser.FirstName<span> </span>@ToUser.LastName</b>
                }
                else
                {
                    <b>@ToUser.EmailAddress</b>
                }
            </h3>
        </div>
        </div>

        <div id="divMessageContainerBase" class="panel-body msg_container_base">
            
            @foreach (var messagePack in messagePacks)
            {            
                @if(messagePack.FromUserId == FromUserId)
                {
                    <div class="row msg_container base_sent">
                        <div class="col-md-10 col-xs-10">
                            <div class="messages msg_sent">
                                <p>@messagePack.Message</p>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row msg_container base_receive">
                        <div class="col-md-10 col-xs-10">
                            <div class="messages msg_receive">
                                <p>@messagePack.Message</p>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!--CHAT USER BOX-->
        <div class="panel-footer">
            <div class="input-group" id="myForm">
                <input id="txtMessageInput" type="text" class="form-control input-sm chat_input" 
                placeholder="Write your message here..." @onkeydown="@(e => OnKeyDownEventChat(e))">
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter]
    public string ToUserId { get; set; }
    public User ToUser { get; set; } = new User();
    public string FromUserId { get; set; }
    public User FromUser { get; set; } = new User();

    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private List<MessagePack> messagePacks = new List<MessagePack>();
    public bool IsConnected;
    public bool IsEnterPressed;
    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }
    public System.Security.Claims.ClaimsPrincipal claimsPrincipal { get; set; }
    private ChatViewModel _chatViewModel = new ChatViewModel();


    protected override async Task OnInitializedAsync()
    {
        claimsPrincipal = (await authenticationStateTask).User;

        if (!claimsPrincipal.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("/");

        FromUserId = Convert.ToString(await LocalStorageService.GetItemAsync<long>("userId"));

        if(Convert.ToInt32(FromUserId) > 0)
        {
            FromUser = await HttpClient.GetFromJsonAsync<User>("user/getprofile/" + FromUserId);
        }

        if (Convert.ToInt32(ToUserId) > 0)
        {
            ToUser = await HttpClient.GetFromJsonAsync<User>("user/getprofile/" + ToUserId);
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<MessagePack>("ReceiveMessage", Listen);

        await _hubConnection.StartAsync();

        if (_hubConnection.State == HubConnectionState.Connected)
            IsConnected = true;
    }

    private async Task Listen(MessagePack messagePack)
    {
        //case 1: from user should see the message
        //case 2: to user should see the message            
        if (messagePack.FromUserId == FromUserId || messagePack.ToUserId == FromUserId)
        {
            messagePacks.Add(messagePack);
            
            if(FromUser.UserId == Convert.ToInt32(messagePack.ToUserId) && FromUser.Notifications == 1)
                await JSRuntime.InvokeVoidAsync("changeTitle");
            
            StateHasChanged();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setScroll");
    }

    public async Task OnKeyDownEvent(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            string messsageToBeSent = await JSRuntime.InvokeAsync<string>("getMessageInput");
            await Send(messsageToBeSent);
        }
    }

    public async Task OnKeyDownEventChat(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            string messsageToBeSent = await JSRuntime.InvokeAsync<string>("getMessageInput");
            await Send(messsageToBeSent);
        }
    }

    public async Task Send(string message)
    {
        if (message != null && message.Length > 0)
        {
            MessagePack messagePack = new MessagePack();
            messagePack.ToUserId = ToUserId;
            messagePack.FromUserId = FromUserId;
            messagePack.Message = message;

            await _hubConnection.SendAsync("SendMessage", messagePack);
        }
    }

}