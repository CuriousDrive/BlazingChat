@using Microsoft.AspNetCore.WebUtilities

@inject ILoginViewModel _loginViewModel
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject IAccessTokenService _accessTokenService

<div class="col-xl-6 col-md-8 col-12">
    <a class="btn btn-block btn-social btn-twitter" @onclick="TwitterJWT" href="">
        <span class="fa fa-twitter"></span> <b>Sign in with Twitter</b>
    </a>
</div>
<br/>
<div class="col-xl-6 col-md-8 col-12">
    <a class="btn btn-block btn-social btn-facebook" @onclick="FacebookJWT" href="">
        <span class="fa fa-facebook"></span> <b>Sign in with Facebook</b>
    </a>
</div>
<hr class="white-horizontal-line"/>

@code {

    protected override async Task OnInitializedAsync()
    {
        if (QueryHelpers.ParseQuery(_navigationManager.Uri).TryGetValue("oauth_verifier", out var oauthVerifier))
        {
            var twitterRequestTokenResponse = await _localStorageService.GetItemAsync<TwitterRequestTokenResponse>("twitterRequestTokenResponse");
            twitterRequestTokenResponse.OAuthVerifier = oauthVerifier;

            string token = await _loginViewModel.GetTwitterJWTAsync(twitterRequestTokenResponse);
            await _accessTokenService.SetAccessTokenAsync("jwt_token", token);

            await _localStorageService.RemoveItemAsync("twitterRequestTokenResponse");

            _navigationManager.NavigateTo("/", true);
        }

        var facebookUri = _navigationManager.Uri.Split('#');
        if (facebookUri.Length > 1 && QueryHelpers.ParseQuery(facebookUri[1]).TryGetValue("access_token", out var accessToken))
        {
            string token = await _loginViewModel.GetFacebookJWTAsync(accessToken);
            await _accessTokenService.SetAccessTokenAsync("jwt_token", token);

            _navigationManager.NavigateTo("/", true);
        }
    }

    private async Task FacebookJWT()
    {
        var appIdAndRedirectUri = (await _loginViewModel.GetFacebookAppIDAndRedirectUriAsync()).Split('&');

        var accessTokenRequest = "https://www.facebook.com/v11.0/dialog/oauth"
                                 + "?response_type=token"
                                 + $"&client_id={appIdAndRedirectUri[0]}"
                                 + $"&redirect_uri={appIdAndRedirectUri[1]}";

        _navigationManager.NavigateTo(accessTokenRequest, true);
    }

    private async Task TwitterJWT()
    {
        var twitterRequestTokenResponse = await _loginViewModel.GetTwitterOAuthTokenAsync();
        await _localStorageService.SetItemAsync("twitterRequestTokenResponse", twitterRequestTokenResponse);

        _navigationManager.NavigateTo(
            $"https://api.twitter.com/oauth/authorize?oauth_token={twitterRequestTokenResponse.OAuthToken}");
    }

    private async Task GoogleJWT()
    {
        var appIdAndRedirectUri = (await _loginViewModel.GetGoogleClientIDAndRedirectUriAsync()).Split('&');

        var accessTokenRequest = "https://accounts.google.com/o/oauth2/v2/auth?"
                                 + "scope=https%3A//www.googleapis.com/auth/drive.metadata.readonly&"
                                 + "access_type=offline&"
                                 + "include_granted_scopes=true&"
                                 + "response_type=code&"
                                 + "state=state_parameter_passthrough_value&"
                                 + $"client_id={appIdAndRedirectUri[0]}&"
                                 + $"redirect_uri={appIdAndRedirectUri[1]}";

        _navigationManager.NavigateTo(accessTokenRequest, true);
    }
}
