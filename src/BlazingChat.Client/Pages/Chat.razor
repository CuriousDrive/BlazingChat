@page "/chat"
@page "/chat/{ToUserId}"

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Options

@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient
@inject ILocalStorageService _localStorageService
@inject ILoginViewModel _loginViewModel
@inject IProfileViewModel _prolfileViewModel
@inject IConfiguration _configuration
@inject IOptions<ApplicationSettings> _applicationSettings

@attribute [Authorize(Roles = "admin, general")]

<div style="border:0px;height:90vh;">
    <div class="panel panel-primary" style="height: 85%;">
        <div class="panel-heading top-bar">
            <div class="col-md-8 col-xs-8">
                <h3 class="panel-title">
                    @if (ToUser != null)
                    {
                        @if (ToUser.FirstName != null || ToUser.LastName != null)
                        {
                            <b>@ToUser.FirstName<span>&nbsp;</span>@ToUser.LastName</b>
                        }
                        else
                        {
                            <b>@ToUser.EmailAddress</b>
                        }
                    }
                </h3>
            </div>
        </div>
        <div id="divMessageContainerBase" class="panel-body msg_container_base">
            @if (Messages?.Any() ?? false)
            {
                @foreach (var message in Messages)
                {
                    @if (message.FromUserId == FromUserId)
                    {
                        <div class="row msg_container base_sent">
                            <div class="col-md-10 col-xs-10">
                                <div class="messages msg_sent">
                                    <p>@message.MessageText</p>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row msg_container base_receive">
                            <div class="col-md-10 col-xs-10">
                                <div class="messages msg_receive">
                                    <p>@message.MessageText</p>
                                </div>
                            </div>
                        </div>
                    }
                }
            }
        </div>
        <!--CHAT USER BOX-->
        <div class="panel-footer">
            <div class="input-group" id="myForm">
                <input id="txtMessageInput" 
                        @bind="MessageText" 
                        type="text" 
                        class="form-control input-sm chat_input"
                        placeholder="Write your message here..."
                        @onkeydown="OnKeyDownEvent">
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ToUserId { get; set; }

    private User ToUser { get; set; } = new();
    private string FromUserId { get; set; }
    private string MessageText { get; set; }
    private List<Message> Messages { get; } = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var claimsPrincipal = (await AuthenticationStateTask).User;

        if (claimsPrincipal.Identity is not { IsAuthenticated: true })
            _navigationManager.NavigateTo("/");

        var jwtToken = await _localStorageService.GetItemAsStringAsync("jwt_token");
        if (jwtToken == null) return;

        FromUserId = (await _loginViewModel.GetUserByJWTAsync(jwtToken)).UserId.ToString();

        if (Convert.ToInt32(ToUserId) > 0)
        {
            _prolfileViewModel.UserId = Convert.ToInt64(ToUserId);
            await _prolfileViewModel.GetProfile();
            ToUser = new User
            {
                FirstName = _prolfileViewModel.FirstName,
                LastName = _prolfileViewModel.LastName,
                EmailAddress = _prolfileViewModel.EmailAddress,
            };
        }

        Console.WriteLine(_applicationSettings.Value.BaseAddress);
        var baseAddress = _applicationSettings.Value.BaseAddress; //_configuration["ApplicationSettings:BaseAddress"];

        _hubConnection = new HubConnectionBuilder()
                            .WithUrl($"{baseAddress}chathub")
                            .Build();

        _hubConnection.On<Message>("ReceiveMessage", message =>
        {
            if (message.FromUserId == FromUserId ||
            (message.ToUserId == FromUserId && message.FromUserId == ToUserId))
            {
                Messages.Add(message);
                StateHasChanged();
            }
        });

        await _hubConnection.StartAsync();
    }

    private async Task OnKeyDownEvent(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Code == "Enter" || eventArgs.Code == "NumpadEnter")
        {
            var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import","./js/site.js");
            var messageToBeSent = await module.InvokeAsync<string>("getMessageInput");
            await Send(messageToBeSent);
        }
    }

    public async Task Send(string messageText)
    {
        if (messageText.Length > 0)
        {
            Message message = new Message();
            message.ToUserId = ToUserId;
            message.FromUserId = FromUserId;
            message.MessageText = MessageText;

            await _hubConnection.SendAsync("SendMessage", message);
            MessageText = "";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/site.js");
        await module.InvokeVoidAsync("setScroll");
    }

}
